;/*
;    FreeRTOS V6.0.1 - Copyright (C) 2009 Real Time Engineers Ltd.
;
;    ***************************************************************************
;    *                                                                         *
;    * If you are:                                                             *
;    *                                                                         *
;    *    + New to FreeRTOS,                                                   *
;    *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
;    *    + Looking for basic training,                                        *
;    *    + Wanting to improve your FreeRTOS skills and productivity           *
;    *                                                                         *
;    * then take a look at the FreeRTOS eBook                                  *
;    *                                                                         *
;    *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
;    *                  http://www.FreeRTOS.org/Documentation                  *
;    *                                                                         *
;    * A pdf reference manual is also available.  Both are usually delivered   *
;    * to your inbox within 20 minutes to two hours when purchased between 8am *
;    * and 8pm GMT (although please allow up to 24 hours in case of            *
;    * exceptional circumstances).  Thank you for your support!                *
;    *                                                                         *
;    ***************************************************************************
;
;    This file is part of the FreeRTOS distribution.
;
;    FreeRTOS is free software; you can redistribute it and/or modify it under
;    the terms of the GNU General Public License (version 2) as published by the
;    Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
;    ***NOTE*** The exception to the GPL is included to allow you to distribute
;    a combined work that includes FreeRTOS without being obliged to provide the
;    source code for proprietary components outside of the FreeRTOS kernel.
;    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
;    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
;    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
;    more details. You should have received a copy of the GNU General Public 
;    License and the FreeRTOS license exception along with FreeRTOS; if not it 
;    can be viewed here: http://www.freertos.org/a00114.html and also obtained 
;    by writing to Richard Barry, contact details for whom are available on the
;    FreeRTOS WEB site.
;
;    1 tab == 4 spaces!
;
;    http://www.FreeRTOS.org - Documentation, latest information, license and
;    contact details.
;
;    http://www.SafeRTOS.com - A version that is certified for use in safety
;    critical systems.
;
;    http://www.OpenRTOS.com - Commercial support, development, porting,
;    licensing and training services.
;*/

	.import _pxCurrentTCB
	.import _vTaskSwitchContext

	.export _vPortStartFirstTask
	.export _ulPortGetGBR
	.export _vPortYield

    .section    P
	
_vPortStartFirstTask:
		
	; Get the address of the pxCurrentTCB variable.
	mov.l	#_pxCurrentTCB, r15

	; Get the address of the task stack from pxCurrentTCB.
	mov.l	@r15, r15

	; Get the task stack itself into the stack pointer. 
	mov.l	@r15, r15		

	; Restore r0 to PR (PR is used in place of r15).
	movml.l	@r15+, r15
	
	; Restore system registers.
	ldc.l	@r15+, gbr
	lds.l	@r15+, mach
	lds.l	@r15+, macl
	
	; Pop the SR and PC to jump to the start of the task.
	rte
	nop

_vPortYield:

	; Save registers in the same order used by the CPU itself.
	sts.l	macl, @-r15
	sts.l	mach, @-r15
	stc.l	gbr, @-r15
	movml.l	r15, @-r15
	
	; Get the address of pxCurrentTCB
	mov.l	#_pxCurrentTCB, r0
	
	; Get the address of pxTopOfStack from the TCB.
	mov.l	@r0, r0
	
	; Save the stack pointer in pxTopOfStack.
	mov.l	r15, @r0

	mov.l	#_vTaskSwitchContext, r0
	jsr		@r0
	nop

	; Get the address of the pxCurrentTCB variable.
	mov.l	#_pxCurrentTCB, r15

	; Get the address of the task stack from pxCurrentTCB.
	mov.l	@r15, r15

	; Get the task stack itself into the stack pointer. 
	mov.l	@r15, r15		

	; Restore r0 to PR (PR is used in place of r15).
	movml.l	@r15+, r15
	
	; Restore system registers.
	ldc.l	@r15+, gbr
	lds.l	@r15+, mach
	lds.l	@r15+, macl
	
	; Pop the SR and PC to jump to the start of the task.
	rte
	nop


_ulPortGetGBR:

	stc.l	gbr, r0
	rts
	nop

	.end
		

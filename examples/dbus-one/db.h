/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __DB_H__
#define __DB_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for Knight.Add.Dbus */

#define TYPE_KNIGHT_ADD_DBUS (knight_add_dbus_get_type ())
#define KNIGHT_ADD_DBUS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_KNIGHT_ADD_DBUS, KnightAddDbus))
#define IS_KNIGHT_ADD_DBUS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_KNIGHT_ADD_DBUS))
#define KNIGHT_ADD_DBUS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_KNIGHT_ADD_DBUS, KnightAddDbusIface))

struct _KnightAddDbus;
typedef struct _KnightAddDbus KnightAddDbus;
typedef struct _KnightAddDbusIface KnightAddDbusIface;

struct _KnightAddDbusIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_add_num) (
    KnightAddDbus *object,
    GDBusMethodInvocation *invocation,
    gint arg_num1,
    gint arg_num2);

};

GType knight_add_dbus_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *knight_add_dbus_interface_info (void);
guint knight_add_dbus_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void knight_add_dbus_complete_add_num (
    KnightAddDbus *object,
    GDBusMethodInvocation *invocation,
    gint sum,
    gint retval);



/* D-Bus method calls: */
void knight_add_dbus_call_add_num (
    KnightAddDbus *proxy,
    gint arg_num1,
    gint arg_num2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean knight_add_dbus_call_add_num_finish (
    KnightAddDbus *proxy,
    gint *out_sum,
    gint *out_retval,
    GAsyncResult *res,
    GError **error);

gboolean knight_add_dbus_call_add_num_sync (
    KnightAddDbus *proxy,
    gint arg_num1,
    gint arg_num2,
    gint *out_sum,
    gint *out_retval,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_KNIGHT_ADD_DBUS_PROXY (knight_add_dbus_proxy_get_type ())
#define KNIGHT_ADD_DBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_KNIGHT_ADD_DBUS_PROXY, KnightAddDbusProxy))
#define KNIGHT_ADD_DBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_KNIGHT_ADD_DBUS_PROXY, KnightAddDbusProxyClass))
#define KNIGHT_ADD_DBUS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_KNIGHT_ADD_DBUS_PROXY, KnightAddDbusProxyClass))
#define IS_KNIGHT_ADD_DBUS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_KNIGHT_ADD_DBUS_PROXY))
#define IS_KNIGHT_ADD_DBUS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_KNIGHT_ADD_DBUS_PROXY))

typedef struct _KnightAddDbusProxy KnightAddDbusProxy;
typedef struct _KnightAddDbusProxyClass KnightAddDbusProxyClass;
typedef struct _KnightAddDbusProxyPrivate KnightAddDbusProxyPrivate;

struct _KnightAddDbusProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  KnightAddDbusProxyPrivate *priv;
};

struct _KnightAddDbusProxyClass
{
  GDBusProxyClass parent_class;
};

GType knight_add_dbus_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (KnightAddDbusProxy, g_object_unref)
#endif

void knight_add_dbus_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
KnightAddDbus *knight_add_dbus_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
KnightAddDbus *knight_add_dbus_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void knight_add_dbus_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
KnightAddDbus *knight_add_dbus_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
KnightAddDbus *knight_add_dbus_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_KNIGHT_ADD_DBUS_SKELETON (knight_add_dbus_skeleton_get_type ())
#define KNIGHT_ADD_DBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_KNIGHT_ADD_DBUS_SKELETON, KnightAddDbusSkeleton))
#define KNIGHT_ADD_DBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_KNIGHT_ADD_DBUS_SKELETON, KnightAddDbusSkeletonClass))
#define KNIGHT_ADD_DBUS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_KNIGHT_ADD_DBUS_SKELETON, KnightAddDbusSkeletonClass))
#define IS_KNIGHT_ADD_DBUS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_KNIGHT_ADD_DBUS_SKELETON))
#define IS_KNIGHT_ADD_DBUS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_KNIGHT_ADD_DBUS_SKELETON))

typedef struct _KnightAddDbusSkeleton KnightAddDbusSkeleton;
typedef struct _KnightAddDbusSkeletonClass KnightAddDbusSkeletonClass;
typedef struct _KnightAddDbusSkeletonPrivate KnightAddDbusSkeletonPrivate;

struct _KnightAddDbusSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  KnightAddDbusSkeletonPrivate *priv;
};

struct _KnightAddDbusSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType knight_add_dbus_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (KnightAddDbusSkeleton, g_object_unref)
#endif

KnightAddDbus *knight_add_dbus_skeleton_new (void);


G_END_DECLS

#endif /* __DB_H__ */
